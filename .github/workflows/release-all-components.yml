name: Release All Criage Components

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  VERSION: ${{ github.event.inputs.version || '1.0.0' }}

jobs:
  create-tags:
    name: Create Release Tags
    runs-on: ubuntu-latest
    outputs:
      client-repo: ${{ steps.repos.outputs.client }}
      server-repo: ${{ steps.repos.outputs.server }}
      mcp-repo: ${{ steps.repos.outputs.mcp }}
    steps:
      - name: Set repository names
        id: repos
        run: |
          echo "client=criage-oss/criage-client" >> $GITHUB_OUTPUT
          echo "server=criage-oss/criage-server" >> $GITHUB_OUTPUT
          echo "mcp=criage-oss/criage-mcp" >> $GITHUB_OUTPUT

      - name: Create release tag for criage-client
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            try {
              await github.rest.git.createRef({
                owner: 'criage-oss',
                repo: 'criage-client',
                ref: 'refs/tags/v${{ env.VERSION }}',
                sha: await github.rest.repos.getBranch({
                  owner: 'criage-oss',
                  repo: 'criage-client',
                  branch: 'main'
                }).then(r => r.data.commit.sha)
              });
              console.log('Created tag v${{ env.VERSION }} for criage-client');
            } catch (error) {
              if (error.status === 422) {
                console.log('Tag v${{ env.VERSION }} already exists for criage-client');
              } else {
                throw error;
              }
            }

      - name: Create release tag for criage-server
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            try {
              await github.rest.git.createRef({
                owner: 'criage-oss',
                repo: 'criage-server',
                ref: 'refs/tags/v${{ env.VERSION }}',
                sha: await github.rest.repos.getBranch({
                  owner: 'criage-oss',
                  repo: 'criage-server',
                  branch: 'main'
                }).then(r => r.data.commit.sha)
              });
              console.log('Created tag v${{ env.VERSION }} for criage-server');
            } catch (error) {
              if (error.status === 422) {
                console.log('Tag v${{ env.VERSION }} already exists for criage-server');
              } else {
                throw error;
              }
            }

      - name: Create release tag for criage-mcp
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            try {
              await github.rest.git.createRef({
                owner: 'criage-oss',
                repo: 'criage-mcp',
                ref: 'refs/tags/v${{ env.VERSION }}',
                sha: await github.rest.repos.getBranch({
                  owner: 'criage-oss',
                  repo: 'criage-mcp',
                  branch: 'main'
                }).then(r => r.data.commit.sha)
              });
              console.log('Created tag v${{ env.VERSION }} for criage-mcp');
            } catch (error) {
              if (error.status === 422) {
                console.log('Tag v${{ env.VERSION }} already exists for criage-mcp');
              } else {
                throw error;
              }
            }

  wait-for-builds:
    name: Wait for Component Builds
    runs-on: ubuntu-latest
    needs: create-tags
    steps:
      - name: Wait for criage-client build
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const maxWaitTime = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
            const startTime = Date.now();
            
            while (Date.now() - startTime < maxWaitTime) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: 'criage-oss',
                repo: 'criage-client',
                workflow_id: 'build-and-release.yml',
                head_sha: await github.rest.repos.getBranch({
                  owner: 'criage-oss',
                  repo: 'criage-client',
                  branch: 'main'
                }).then(r => r.data.commit.sha)
              });
              
              const run = runs.data.workflow_runs[0];
              if (run && (run.conclusion === 'success' || run.conclusion === 'failure')) {
                if (run.conclusion === 'failure') {
                  throw new Error('criage-client build failed');
                }
                console.log('criage-client build completed successfully');
                break;
              }
              
              await new Promise(resolve => setTimeout(resolve, 30000)); // –ñ–¥–µ–º 30 —Å–µ–∫
            }

      - name: Wait for criage-server build
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const maxWaitTime = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
            const startTime = Date.now();
            
            while (Date.now() - startTime < maxWaitTime) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: 'criage-oss',
                repo: 'criage-server',
                workflow_id: 'build-and-release.yml',
                head_sha: await github.rest.repos.getBranch({
                  owner: 'criage-oss',
                  repo: 'criage-server',
                  branch: 'main'
                }).then(r => r.data.commit.sha)
              });
              
              const run = runs.data.workflow_runs[0];
              if (run && (run.conclusion === 'success' || run.conclusion === 'failure')) {
                if (run.conclusion === 'failure') {
                  throw new Error('criage-server build failed');
                }
                console.log('criage-server build completed successfully');
                break;
              }
              
              await new Promise(resolve => setTimeout(resolve, 30000)); // –ñ–¥–µ–º 30 —Å–µ–∫
            }

      - name: Wait for criage-mcp build
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const maxWaitTime = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
            const startTime = Date.now();
            
            while (Date.now() - startTime < maxWaitTime) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: 'criage-oss',
                repo: 'criage-mcp',
                workflow_id: 'build-and-release.yml',
                head_sha: await github.rest.repos.getBranch({
                  owner: 'criage-oss',
                  repo: 'criage-mcp',
                  branch: 'main'
                }).then(r => r.data.commit.sha)
              });
              
              const run = runs.data.workflow_runs[0];
              if (run && (run.conclusion === 'success' || run.conclusion === 'failure')) {
                if (run.conclusion === 'failure') {
                  throw new Error('criage-mcp build failed');
                }
                console.log('criage-mcp build completed successfully');
                break;
              }
              
              await new Promise(resolve => setTimeout(resolve, 30000)); // –ñ–¥–µ–º 30 —Å–µ–∫
            }

  create-meta-release:
    name: Create Meta Release
    runs-on: ubuntu-latest
    needs: [create-tags, wait-for-builds]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Meta Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Criage v${{ env.VERSION }} - Complete Package Manager Suite
          body: |
            # üöÄ Criage v${{ env.VERSION }} - –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            
            –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–ª–∏–∑ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Criage.
            
            ## üì¶ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ–ª–∏–∑–∞:
            
            ### [Criage Client v${{ env.VERSION }}](https://github.com/criage-oss/criage-client/releases/tag/v${{ env.VERSION }})
            - üñ•Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
            - ‚ö° –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ Go
            - üóúÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–∂–∞—Ç–∏—è
            - üåê –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å (Windows, macOS, Linux)
            
            ### [Criage Server v${{ env.VERSION }}](https://github.com/criage-oss/criage-server/releases/tag/v${{ env.VERSION }})
            - üåê HTTP —Å–µ—Ä–≤–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–∞–∫–µ—Ç–æ–≤
            - üì° REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏
            - üîí –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            - üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            
            ### [Criage MCP Server v${{ env.VERSION }}](https://github.com/criage-oss/criage-mcp/releases/tag/v${{ env.VERSION }})
            - ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (Claude Desktop)
            - üì° Model Context Protocol (MCP) —Å–µ—Ä–≤–µ—Ä
            - üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ AI
            - üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ natural language –∫–æ–º–∞–Ω–¥
            
            ## üöÄ Quick Start:
            
            ```bash
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
            wget https://github.com/criage-oss/criage-client/releases/download/v${{ env.VERSION }}/criage-linux-amd64.tar.gz
            tar -xzf criage-linux-amd64.tar.gz
            sudo mv criage /usr/local/bin/
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞
            criage install package-name
            ```
            
            ## üê≥ Docker Images:
            - `criage/client:${{ env.VERSION }}`
            - `criage/server:${{ env.VERSION }}`
            - `criage/mcp-server:${{ env.VERSION }}`
            
            ## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
            - [–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://criage.ru)
            - [–ö–ª–∏–µ–Ω—Ç](https://criage.ru/docs.html)
            - [–°–µ—Ä–≤–µ—Ä](https://criage.ru/repository-server.html)
            - [MCP Server](https://criage.ru/mcp-server.html)
            
            ## üîó –°—Å—ã–ª–∫–∏:
            - [–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç](https://criage.ru)
            - [GitHub Organization](https://github.com/criage-oss)
            - [–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ](https://github.com/criage-oss/criage-client/issues)
            
            ---
            
            **–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–ª–∏–∑–∞—Ö –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.**
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-website:
    name: Update Website
    runs-on: ubuntu-latest
    needs: create-meta-release
    steps:
      - name: Checkout website
        uses: actions/checkout@v4

      - name: Update version info
        run: |
          # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ JSON —Ñ–∞–π–ª–µ –¥–ª—è —Å–∞–π—Ç–∞
          echo '{"version": "${{ env.VERSION }}", "released": "'$(date -Iseconds)'"}' > docs/latest-version.json
          
          # –û–±–Ω–æ–≤–ª—è–µ–º README –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          sed -i 's/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: ${{ env.VERSION }}/g' README.md || true

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/latest-version.json README.md
          git commit -m "Update version to v${{ env.VERSION }}" || exit 0
          git push
